name: "Ubuntu CI workflow"


on:
  push:
    branches: [ dev ]
  #schedule:
      #- cron:  '0 0 1 * *' ##execution of a task in the first minute of the month  

jobs:

  #https://docs.observium.org/install_debian/
  ubuntu-observium-automated-job:
    name: "ubuntu-latest observium automated job"
    runs-on: ubuntu-16.04
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: hostnamectl status
    - name: "Automated Installation"
      run: |
        sudo wget http://www.observium.org/observium_installscript.sh
        sudo chmod +x observium_installscript.sh
        sudo ./observium_installscript.sh

  #https://docs.observium.org/install_debian/
  ubuntu-1804-observium-automated-job:
    name: "ubuntu-latest observium automated job"
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: hostnamectl status
    - name: "Automated Installation"
      run: |
        sudo wget http://www.observium.org/observium_installscript.sh
        sudo chmod +x observium_installscript.sh
        sudo ./observium_installscript.sh
        
  #https://docs.observium.org/install_debian/
  ubuntu-2004-observium-automated-job:
    name: "ubuntu-latest observium automated job"
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: hostnamectl status
    - name: "Automated Installation"
      run: |
        sudo wget http://www.observium.org/observium_installscript.sh
        sudo chmod +x observium_installscript.sh
        sudo ./observium_installscript.sh        

#https://support.nagios.com/kb/article/nagios-core-installing-nagios-core-from-source-96.html#Ubuntu
  ubuntu-1604-nagios-job:
    name: "ubuntu-16.04 nagios job"
    runs-on: ubuntu-16.04
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: hostnamectl status  
      
#https://docs.librenms.org/Installation/Install-LibreNMS/
  ubuntu-2004-librenms-nginx-job:
    name: "ubuntu-20.04 librenms job nginx"
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: hostnamectl status 
    - name: "Install Required Packages"
      run: sudo apt-get install -qqy software-properties-common
    - name: "Install Required Packages 2"
      run: |
        sudo apt-get install -qqy software-properties-common
        sudo add-apt-repository universe
        sudo apt-get update -qq
        sudo apt-get install -yqq acl curl composer fping git graphviz imagemagick mariadb-client mariadb-server mtr-tiny nginx-full nmap php7.4-cli php7.4-curl php7.4-fpm php7.4-gd php7.4-json php7.4-mbstring php7.4-mysql php7.4-snmp php7.4-xml php7.4-zip rrdtool snmp snmpd whois unzip python3-pymysql python3-dotenv python3-redis python3-setuptools python3-systemd
    - name: "Add librenms user"
      run: sudo useradd librenms -d /opt/librenms -M -r -s "$(which bash)"
    - name: "Download LibreNMS"
      run: cd /opt && git clone https://github.com/librenms/librenms.git
    - name: "Set permissions"
      run: |
        sudo chown -R librenms:librenms /opt/librenms
        sudo chmod 771 /opt/librenms
        sudo setfacl -d -m g::rwx /opt/librenms/rrd /opt/librenms/logs /opt/librenms/bootstrap/cache/ /opt/librenms/storage/
        sudo setfacl -R -m g::rwx /opt/librenms/rrd /opt/librenms/logs /opt/librenms/bootstrap/cache/ /opt/librenms/storage/


#https://docs.librenms.org/Installation/Install-LibreNMS/
  ubuntu-2004-librenms-apache-job:
    name: "ubuntu-20.04 librenms job apache"
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: hostnamectl status 
    - name: "Install Required Packages"
      run: sudo apt-get install -qqy software-properties-common
    - name: "Install Required Packages 2"
      run: |
        sudo apt-get install -qqy software-properties-common
        sudo add-apt-repository universe
        sudo apt-get update -qq
        sudo apt-get install -yqq acl curl apache2 composer fping git graphviz imagemagick libapache2-mod-fcgid mariadb-client mariadb-server mtr-tiny nmap php7.4-cli php7.4-curl php7.4-fpm php7.4-gd php7.4-json php7.4-mbstring php7.4-mysql php7.4-snmp php7.4-xml php7.4-zip rrdtool snmp snmpd whois python3-pymysql python3-dotenv python3-redis python3-setuptools python3-systemd


#https://support.nagios.com/kb/article/nagios-core-installing-nagios-core-from-source-96.html#Ubuntu
  ubuntu-1604-nagios-job:
    name: "ubuntu-16.04 nagios job"
    runs-on: ubuntu-16.04
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: hostnamectl status  
    - name: "Security-Enhanced Linux"
      #This guide is based on SELinux being disabled or in permissive mode. SELinux is not enabled by default on Ubuntu
      run: sudo dpkg -l selinux*  
    - name: "Prerequisites"
      run: |
        sudo dpkg -l selinux* #This guide is based on SELinux being disabled or in permissive mode. SELinux is not enabled by default on Ubuntu
        sudo apt-get update -qq
        #sudo apt-get install -yqq autoconf gcc libc6 make wget unzip apache2 php libapache2-mod-php7.0 libgd2-xpm-dev #Package 'libgd2-xpm-dev' has no installation candidate     
        sudo apt-get install -yqq autoconf gcc libc6 make wget unzip apache2 php libapache2-mod-php7.0
    - name: "Downloading the Source"
      run: |
        cd /tmp 
        wget -O nagioscore.tar.gz https://github.com/NagiosEnterprises/nagioscore/archive/nagios-4.4.5.tar.gz
        tar xzf nagioscore.tar.gz   
    - name: "Compile"
      run: |
        cd /tmp/nagioscore-nagios-4.4.5/
        sudo ./configure --with-httpd-conf=/etc/apache2/sites-enabled
        sudo make all   
    - name: "Create User And Group"
      #This creates the nagios user and group. The www-data user is also added to the nagios group.
      run: |
        sudo make install-groups-users #make: *** No rule to make target 'install-groups-users'
        sudo usermod -a -G nagios www-data
    - name: "Install Binaries"
      #This step installs the binary files, CGIs, and HTML files
      run: sudo make install 
    - name: "Install Service / Daemon"
      #This installs the service or daemon files and also configures them to start on boot
      run: sudo make install-daemoninit     
    - name: "Install Command Mode"
      #This installs and configures the external command file
      run: sudo make install-commandmode   

#https://support.nagios.com/kb/article/nagios-core-installing-nagios-core-from-source-96.html#Ubuntu
  ubuntu-1804-nagios-job:
    name: "ubuntu-18.04 nagios job"
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: hostnamectl status 
    - name: "Security-Enhanced Linux"
      #This guide is based on SELinux being disabled or in permissive mode. SELinux is not enabled by default on Ubuntu
      run: sudo dpkg -l selinux*  
    - name: "Prerequisites"
      run: |
        sudo dpkg -l selinux*
        sudo apt-get update -qq
        sudo apt-get install -yqq autoconf gcc libc6 make wget unzip apache2 php libapache2-mod-php7.2 libgd-dev 
    - name: "Downloading the Source"
      run: |
        cd /tmp 
        wget -O nagioscore.tar.gz https://github.com/NagiosEnterprises/nagioscore/archive/nagios-4.4.5.tar.gz
        tar xzf nagioscore.tar.gz         
      
 
      
#https://support.nagios.com/kb/article/nagios-core-installing-nagios-core-from-source-96.html#Ubuntu
  ubuntu-2004-nagios-job:
    name: "ubuntu-20.04 nagios job"
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: hostnamectl status   
    - name: "Security-Enhanced Linux"
      #This guide is based on SELinux being disabled or in permissive mode. SELinux is not enabled by default on Ubuntu
      run: sudo dpkg -l selinux*
    - name: "Prerequisites"
      run: |
        sudo apt-get update -qq
        #libapache2-mod-php7.4 : Depends: php7.4-common (= 7.4.3-4ubuntu2.4) but 7.4.16-1+ubuntu20.04.1+deb.sury.org+1 is to be installed
        #sudo apt-get install -y autoconf gcc libc6 make wget unzip apache2 php libapache2-mod-php7.4 libgd-dev
        sudo apt-get install -y autoconf gcc libc6 make wget unzip apache2 php

           
        
